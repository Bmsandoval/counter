// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/bryansandoval/projects/counter/src/Services/config_service.go

// Package Services_mocks is a generated GoMock package.
package Services_mocks

import (
	types "github.com/bmsandoval/counter/src/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfigService is a mock of ConfigService interface
type MockConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceMockRecorder
}

// MockConfigServiceMockRecorder is the mock recorder for MockConfigService
type MockConfigServiceMockRecorder struct {
	mock *MockConfigService
}

// NewMockConfigService creates a new mock instance
func NewMockConfigService(ctrl *gomock.Controller) *MockConfigService {
	mock := &MockConfigService{ctrl: ctrl}
	mock.recorder = &MockConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigService) EXPECT() *MockConfigServiceMockRecorder {
	return m.recorder
}

// SaveConfig mocks base method
func (m *MockConfigService) SaveConfig(config types.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig
func (mr *MockConfigServiceMockRecorder) SaveConfig(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockConfigService)(nil).SaveConfig), config)
}

// LoadConfig mocks base method
func (m *MockConfigService) LoadConfig(filePath string) (types.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfig", filePath)
	ret0, _ := ret[0].(types.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfig indicates an expected call of LoadConfig
func (mr *MockConfigServiceMockRecorder) LoadConfig(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockConfigService)(nil).LoadConfig), filePath)
}
