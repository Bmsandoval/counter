// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/bryansandoval/projects/counter/src/Services/counter_service.go

// Package Services_mocks is a generated GoMock package.
package Services_mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCounterService is a mock of CounterService interface
type MockCounterService struct {
	ctrl     *gomock.Controller
	recorder *MockCounterServiceMockRecorder
}

// MockCounterServiceMockRecorder is the mock recorder for MockCounterService
type MockCounterServiceMockRecorder struct {
	mock *MockCounterService
}

// NewMockCounterService creates a new mock instance
func NewMockCounterService(ctrl *gomock.Controller) *MockCounterService {
	mock := &MockCounterService{ctrl: ctrl}
	mock.recorder = &MockCounterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCounterService) EXPECT() *MockCounterServiceMockRecorder {
	return m.recorder
}

// GetCounter mocks base method
func (m *MockCounterService) GetCounter(filePath string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", filePath)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter
func (mr *MockCounterServiceMockRecorder) GetCounter(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockCounterService)(nil).GetCounter), filePath)
}

// SetCounter mocks base method
func (m *MockCounterService) SetCounter(filePath string, counter int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCounter", filePath, counter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCounter indicates an expected call of SetCounter
func (mr *MockCounterServiceMockRecorder) SetCounter(filePath, counter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCounter", reflect.TypeOf((*MockCounterService)(nil).SetCounter), filePath, counter)
}

// GetCounterPath mocks base method
func (m *MockCounterService) GetCounterPath(filePath, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounterPath", filePath, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounterPath indicates an expected call of GetCounterPath
func (mr *MockCounterServiceMockRecorder) GetCounterPath(filePath, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterPath", reflect.TypeOf((*MockCounterService)(nil).GetCounterPath), filePath, fileName)
}
