// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/bryansandoval/projects/counter/src/Services/event_listener_service.go

// Package Services_mocks is a generated GoMock package.
package Services_mocks

import (
	gomock "github.com/golang/mock/gomock"
	hotkey "golang.design/x/hotkey"
	reflect "reflect"
)

// MockEventListenerService is a mock of EventListenerService interface
type MockEventListenerService struct {
	ctrl     *gomock.Controller
	recorder *MockEventListenerServiceMockRecorder
}

// MockEventListenerServiceMockRecorder is the mock recorder for MockEventListenerService
type MockEventListenerServiceMockRecorder struct {
	mock *MockEventListenerService
}

// NewMockEventListenerService creates a new mock instance
func NewMockEventListenerService(ctrl *gomock.Controller) *MockEventListenerService {
	mock := &MockEventListenerService{ctrl: ctrl}
	mock.recorder = &MockEventListenerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventListenerService) EXPECT() *MockEventListenerServiceMockRecorder {
	return m.recorder
}

// ListenForHotkeyEvents mocks base method
func (m *MockEventListenerService) ListenForHotkeyEvents(hotkeys []*hotkey.Hotkey) func(func(string) bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForHotkeyEvents", hotkeys)
	ret0, _ := ret[0].(func(func(string) bool))
	return ret0
}

// ListenForHotkeyEvents indicates an expected call of ListenForHotkeyEvents
func (mr *MockEventListenerServiceMockRecorder) ListenForHotkeyEvents(hotkeys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForHotkeyEvents", reflect.TypeOf((*MockEventListenerService)(nil).ListenForHotkeyEvents), hotkeys)
}
